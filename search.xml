<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>sparseArrPlus</title>
      <link href="/2019/09/16/sparsearr-fu-ben/"/>
      <url>/2019/09/16/sparsearr-fu-ben/</url>
      
        <content type="html"><![CDATA[<h1 id="数组模拟环形队列"><a href="#数组模拟环形队列" class="headerlink" title="数组模拟环形队列"></a>数组模拟环形队列</h1><hr><p>充分利用数组.将数组看做是一个环形的。(通过取模的方式来实现即可)</p><h3 id="分析说明："><a href="#分析说明：" class="headerlink" title="分析说明："></a>分析说明：</h3><blockquote><p>1)尾索引的下一个为头索引时表示队列满，即将队列容量空出一个作为约定,这个在做判断队列满的<br>时候需要注意  (rear + 1) % maxSize == front满]<br>2)  rear == front [空]<br>3)分析示意图如下</p></blockquote><hr><p><img src="https://raw.githubusercontent.com/ZhangNingChao1/learning/master/img/%E7%8E%AF%E5%BD%A2%E9%98%9F%E5%88%97.jpg" alt=""></p><hr><p>代码如下</p><blockquote><p>我们预留了一个位置，好让添加与取出数据更容易实现。这里rear与front的初始值都为0</p><pre class=" language-python"><code class="language-python"><span class="token operator">//</span>我们预留了一个位置，好让添加与取出数据更容易实现。这里rear与front的初始值都为<span class="token number">0</span> public boolean isEmpty<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> rear <span class="token operator">==</span> front<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public boolean isFull<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>rear <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> maxSize <span class="token operator">==</span> front<span class="token punctuation">;</span><span class="token operator">//</span>取余是为了除去（rear<span class="token operator">+</span><span class="token number">1</span>）<span class="token operator">></span>maxSize的情况    <span class="token punctuation">}</span></code></pre></blockquote><pre><code>public void addQueue(int add) {    if (isFull()) {        System.out.println("队列已满，不能加入数据");        return ;    }    arr[rear] = add;    rear = (rear + 1) % maxSize;}public int getQueue() {    if (isEmpty()) {        throw new RuntimeException("队列为空，没有数据");    }    int i = arr[front];    front = (front + 1) % maxSize;    return i;}public int headQueue() {    if (isEmpty()) {        throw new RuntimeException("队列为空，没有数据");    }    return arr[front];}public void showQueue() {    if (isEmpty()) {        System.out.println("队列空的，没有数据~~");        return;    }    for (int i = front; i &lt; front + size(); i++) {        System.out.println(arr[i % maxSize]);    }}public int size() {    return (rear + maxSize - front) % maxSize;//可能rear在front前面，所以这时我们加上maxSize}</code></pre><p>```</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>resverLinkedList</title>
      <link href="/2019/09/16/resverlinked/"/>
      <url>/2019/09/16/resverlinked/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="有这样一道面试题，反转一个已知的带head的链表"><a href="#有这样一道面试题，反转一个已知的带head的链表" class="headerlink" title="有这样一道面试题，反转一个已知的带head的链表"></a>有这样一道面试题，反转一个已知的带head的链表</h2><blockquote><p>让我们先借助图分析一下</p></blockquote><p><img src="https://raw.githubusercontent.com/ZhangNingChao1/learning/master/img/%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8.jpg" alt=""></p><p><strong>上图表示的整体步骤就是如下</strong></p><blockquote><ul><li>先创建一个头节点，它的指向时一个新的也就是反转后的链表</li><li>开始遍历原来的链表，每遍历一个节点，就把新创建好的头节点指向它，当然遍历到的节点就指向它前一个遍历到的节点啦。</li><li>最后在把这个头节点的指向赋值给原来的头节点的指向就行了。</li></ul></blockquote><hr><h2 id="下面是代码"><a href="#下面是代码" class="headerlink" title="下面是代码"></a>下面是代码</h2><pre class=" language-python"><code class="language-python"> public static void reversal<span class="token punctuation">(</span>HeroNodes heroNodes<span class="token punctuation">)</span><span class="token punctuation">{</span>        HeroNodes cur<span class="token operator">=</span>heroNodes<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        HeroNodes next<span class="token operator">=</span>null<span class="token punctuation">;</span>        HeroNodes vHead<span class="token operator">=</span>new HeroNodes<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">==</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span>println<span class="token punctuation">(</span><span class="token string">"----链表为空----"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>            next<span class="token operator">=</span>cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token operator">//</span>先保存当前节点的下一个节点的信息            cur<span class="token punctuation">.</span>next<span class="token operator">=</span>vHead<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token operator">//</span>表示直接将cur的next属性置空，因为链表反转后的最后一个节点就是原                                 <span class="token operator">//</span>来链表的第一个节点           vHead<span class="token punctuation">.</span>next<span class="token operator">=</span>cur<span class="token punctuation">;</span><span class="token operator">//</span>将cur连接到新链表上            cur<span class="token operator">=</span>next<span class="token punctuation">;</span>          <span class="token operator">//</span>cur后移        <span class="token punctuation">}</span>        heroNodes<span class="token punctuation">.</span>next<span class="token operator">=</span>vHead<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token operator">//</span>将当前的头节点变为原来的头节点，这里的<span class="token punctuation">.</span>next表示连指向一起换掉    <span class="token punctuation">}</span></code></pre><hr><h2 id="还有类似的，比如将一个链表反向打印输出（要注意不能破坏链表的结构）"><a href="#还有类似的，比如将一个链表反向打印输出（要注意不能破坏链表的结构）" class="headerlink" title="还有类似的，比如将一个链表反向打印输出（要注意不能破坏链表的结构）"></a>还有类似的，比如将一个链表反向打印输出（<strong>要注意不能破坏链表的结构</strong>）</h2><blockquote><p>既然不能破坏链表的结构，我们当然不能将链表反转了，这里我们利用了java中的栈，因为栈有先进后出，也就是后进先出的特性，刚好符合我们既不破坏链表的结构，又能将链表反向输出的要求。</p></blockquote><hr><h2 id="下面是代码-1"><a href="#下面是代码-1" class="headerlink" title="下面是代码"></a>下面是代码</h2><pre class=" language-python"><code class="language-python">public static void resversPri<span class="token punctuation">(</span>HeroNodes heroNodes<span class="token punctuation">)</span><span class="token punctuation">{</span>        Stack<span class="token operator">&lt;</span>HeroNodes<span class="token operator">></span> stack<span class="token operator">=</span>new Stack<span class="token operator">&lt;</span>HeroNodes<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">//</span>创建一个用来存节点的栈对象        HeroNodes temp<span class="token operator">=</span>heroNodes<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token operator">//</span>辅助节点        <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token operator">==</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token operator">//</span>判断链表是否是空的        <span class="token punctuation">}</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>temp<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>            stack<span class="token punctuation">.</span>push<span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">//</span>将节点放入栈中            temp<span class="token operator">=</span>temp<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span>println<span class="token punctuation">(</span>stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Linked List</title>
      <link href="/2019/09/15/linked-list/"/>
      <url>/2019/09/15/linked-list/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="下面是链表的简单介绍"><a href="#下面是链表的简单介绍" class="headerlink" title="下面是链表的简单介绍"></a>下面是链表的简单介绍</h2><p><img src="https://raw.githubusercontent.com/ZhangNingChao1/learning/master/img/linkedList.jpg" alt="cmd-markdown-logo"></p><h2 id="什么是链表"><a href="#什么是链表" class="headerlink" title="什么是链表"></a>什么是链表</h2><ol><li>链表是以节点的方式来存储,是链式存储</li><li>每个节点包含data域，next域：指向下一个节点。</li><li>如图：发现链表的各个节点不一定是连续存储。</li><li>链表分带头节点的链表和没有头节点的链表，根据实际的需求来确定。<h2 id="单链表的应用实例"><a href="#单链表的应用实例" class="headerlink" title="单链表的应用实例"></a>单链表的应用实例</h2>使用带head头的单向链表实现-英雄榜完成对英雄人物的增删改查操作。</li><li>第一种方法在添加英雄时，直接添加到链表的尾部<br>思路分析示意图:<br><img src="https://raw.githubusercontent.com/ZhangNingChao1/learning/master/img/%E6%B7%BB%E5%8A%A0%E8%8B%B1%E9%9B%84.jpg" alt="cmd-markdown-logo"></li><li>第二种方式在添加英雄时，根据排名将英雄插入到指定位置(如果有这个排名，则添加失败，并给出提示)<br>思路的分析示意图:<br><img src="https://raw.githubusercontent.com/ZhangNingChao1/learning/master/img/%E6%B7%BB%E5%8A%A0%E8%8B%B1%E9%9B%842.jpg" alt="cmd-markdown-logo"></li></ol><pre class=" language-python"><code class="language-python">public void addByOrder<span class="token punctuation">(</span>HeroNodes heroNodes<span class="token punctuation">)</span> <span class="token punctuation">{</span>        HeroNodes temp <span class="token operator">=</span> head<span class="token punctuation">;</span><span class="token operator">//</span>我们需要一个辅助遍历  temp，head是创建好的空head        boolean flag <span class="token operator">=</span> false<span class="token punctuation">;</span><span class="token operator">//</span>根据flag来判断链表是否有某个节点        <span class="token keyword">while</span> <span class="token punctuation">(</span>true<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token operator">//</span>看temp是否已经到达的底部            <span class="token keyword">if</span> <span class="token punctuation">(</span>temp<span class="token punctuation">.</span>next <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token operator">//</span>判断当前遍历到的temp的下一个节点的no和要加入英雄no的关系，这里一定要找到插入点前一             <span class="token operator">//</span>个节点，因为要把temp指向要插入的节点            <span class="token keyword">if</span> <span class="token punctuation">(</span>temp<span class="token punctuation">.</span>next<span class="token punctuation">.</span>no <span class="token operator">></span> heroNodes<span class="token punctuation">.</span>no<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>temp<span class="token punctuation">.</span>next<span class="token punctuation">.</span>no <span class="token operator">==</span> heroNodes<span class="token punctuation">.</span>no<span class="token punctuation">)</span> <span class="token punctuation">{</span>                flag<span class="token operator">=</span>true<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token operator">//</span>temp要后移，不然会死循环，它的后移就像遍历数组是下标的后移一样            temp<span class="token operator">=</span>temp<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span>println<span class="token punctuation">(</span><span class="token string">"该英雄编号已存在"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token operator">//</span>找到要插入的节点位置时，将它们的next属性设置好，这里结合图看会很清晰            heroNodes<span class="token punctuation">.</span>next<span class="token operator">=</span>temp<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            temp<span class="token punctuation">.</span>next<span class="token operator">=</span>heroNodes<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><ol start="3"><li><p>修改节点功能<br>思路(1)先找到该节点，通过遍历，<br> (2)  temp.name = newHeroNode.name ; temp.nickname= newHeroNode.nickname<br>代码实现</p><pre class=" language-python"><code class="language-python">public void update<span class="token punctuation">(</span>HeroNodes heroNodes<span class="token punctuation">)</span><span class="token punctuation">{</span>     HeroNodes temp<span class="token operator">=</span>head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>我们需要一个辅助遍历  temp，head是创建好的空head     boolean flag<span class="token operator">=</span>false<span class="token punctuation">;</span>根据flag来判断链表是否有要更新的节点是否存在     <span class="token keyword">while</span><span class="token punctuation">(</span>true<span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token operator">==</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>             System<span class="token punctuation">.</span>out<span class="token punctuation">.</span>println<span class="token punctuation">(</span><span class="token string">"链表为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token keyword">return</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span>no<span class="token operator">==</span>heroNodes<span class="token punctuation">.</span>no<span class="token punctuation">)</span><span class="token punctuation">{</span>             flag<span class="token operator">=</span>true<span class="token punctuation">;</span>             <span class="token keyword">break</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token operator">//</span>temp要后移，不然会死循环，它的后移就像遍历数组是下标的后移一样         temp<span class="token operator">=</span>temp<span class="token punctuation">.</span>next<span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token operator">//</span>若该节点存在，则修改信息         temp<span class="token punctuation">.</span>name<span class="token operator">=</span>heroNodes<span class="token punctuation">.</span>name<span class="token punctuation">;</span>         temp<span class="token punctuation">.</span>alias<span class="token operator">=</span>heroNodes<span class="token punctuation">.</span>alias<span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre></li><li><p>删除节点<br>思路分析的示意图:<br><img src="https://raw.githubusercontent.com/ZhangNingChao1/learning/master/img/%E5%88%A0%E9%99%A4%E8%8A%82%E7%82%B9.jpg" alt="cmd-markdown-logo"></p><pre class=" language-python"><code class="language-python">public void delete<span class="token punctuation">(</span>int  no<span class="token punctuation">)</span><span class="token punctuation">{</span>     HeroNodes temp<span class="token operator">=</span>head<span class="token punctuation">;</span>     boolean flag<span class="token operator">=</span>false<span class="token punctuation">;</span>     <span class="token keyword">while</span> <span class="token punctuation">(</span>true<span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span>next<span class="token operator">==</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>             <span class="token operator">//</span>到链表最后了             <span class="token keyword">break</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>temp<span class="token punctuation">.</span>next<span class="token punctuation">.</span>no<span class="token operator">==</span>no<span class="token punctuation">)</span><span class="token punctuation">{</span>             <span class="token operator">//</span>找到了             flag<span class="token operator">=</span>true<span class="token punctuation">;</span>             <span class="token keyword">break</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         temp<span class="token operator">=</span>temp<span class="token punctuation">.</span>next<span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token operator">//</span>删除是将要删除的节点的指向目标变为它的像一个节点，这个没有被指向的节点就会被垃圾回             <span class="token operator">//</span>收机制给回收掉，也就实现的删除         temp<span class="token punctuation">.</span>next<span class="token operator">=</span>temp<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span>println<span class="token punctuation">(</span><span class="token string">"删除成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">else</span><span class="token punctuation">{</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span>println<span class="token punctuation">(</span><span class="token string">"未找到编号为"</span><span class="token operator">+</span>no<span class="token operator">+</span><span class="token string">"的节点，无法删除"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span></code></pre></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Cmd Markdown</title>
      <link href="/2019/09/15/huan-ying-shi-yong-cmd-markdown-bian-ji-yue-du-qi/"/>
      <url>/2019/09/15/huan-ying-shi-yong-cmd-markdown-bian-ji-yue-du-qi/</url>
      
        <content type="html"><![CDATA[<hr><p>我们理解您需要更便捷更高效的工具记录思想，整理笔记、知识，并将其中承载的价值传播给他人，<strong>Cmd Markdown</strong> 是我们给出的答案 —— 我们为记录思想和分享知识提供更专业的工具。 您可以使用 Cmd Markdown：</p><blockquote><ul><li>整理知识，学习笔记</li><li>发布日记，杂文，所见所想</li><li>撰写发布技术文稿（代码支持）</li><li>撰写发布学术论文（LaTeX 公式支持）</li></ul></blockquote><p><img src="https://www.zybuluo.com/static/img/logo.png" alt="cmd-markdown-logo"></p><p>除了您现在看到的这个 Cmd Markdown 在线版本，您还可以前往以下网址下载：</p><h3 id="Windows-Mac-Linux-全平台客户端"><a href="#Windows-Mac-Linux-全平台客户端" class="headerlink" title="Windows/Mac/Linux 全平台客户端"></a><a href="https://www.zybuluo.com/cmd/" target="_blank" rel="noopener">Windows/Mac/Linux 全平台客户端</a></h3><blockquote><p>请保留此份 Cmd Markdown 的欢迎稿兼使用说明，如需撰写新稿件，点击顶部工具栏右侧的 <i class="icon-file"></i> <strong>新文稿</strong> 或者使用快捷键 <code>Ctrl+Alt+N</code>。</p></blockquote><hr><h2 id="什么是-Markdown"><a href="#什么是-Markdown" class="headerlink" title="什么是 Markdown"></a>什么是 Markdown</h2><p>Markdown 是一种方便记忆、书写的纯文本标记语言，用户可以使用这些标记符号以最小的输入代价生成极富表现力的文档：譬如您正在阅读的这份文档。它使用简单的符号标记不同的标题，分割不同的段落，<strong>粗体</strong> 或者 <em>斜体</em> 某些文字，更棒的是，它还可以</p><h3 id="1-制作一份待办事宜-Todo-列表"><a href="#1-制作一份待办事宜-Todo-列表" class="headerlink" title="1. 制作一份待办事宜 Todo 列表"></a>1. 制作一份待办事宜 <a href="https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#13-待办事宜-todo-列表" target="_blank" rel="noopener">Todo 列表</a></h3><ul><li><input disabled="" type="checkbox"> 支持以 PDF 格式导出文稿</li><li><input disabled="" type="checkbox"> 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率</li><li><input checked="" disabled="" type="checkbox"> 新增 Todo 列表功能</li><li><input checked="" disabled="" type="checkbox"> 修复 LaTex 公式渲染问题</li><li><input checked="" disabled="" type="checkbox"> 新增 LaTex 公式编号功能</li></ul><h3 id="2-书写一个质能守恒公式-LaTeX"><a href="#2-书写一个质能守恒公式-LaTeX" class="headerlink" title="2. 书写一个质能守恒公式[^LaTeX]"></a>2. 书写一个质能守恒公式[^LaTeX]</h3><p>$$E=mc^2$$</p><h3 id="3-高亮一段代码-code"><a href="#3-高亮一段代码-code" class="headerlink" title="3. 高亮一段代码[^code]"></a>3. 高亮一段代码[^code]</h3><pre class=" language-python"><code class="language-python">@requires_authorization<span class="token keyword">class</span> <span class="token class-name">SomeClass</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># A comment</span>    <span class="token keyword">print</span> <span class="token string">'hello world'</span></code></pre><h3 id="4-高效绘制-流程图"><a href="#4-高效绘制-流程图" class="headerlink" title="4. 高效绘制 流程图"></a>4. 高效绘制 <a href="https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#7-流程图" target="_blank" rel="noopener">流程图</a></h3><pre class=" language-flow"><code class="language-flow">st=>start: Startop=>operation: Your Operationcond=>condition: Yes or No?e=>endst->op->condcond(yes)->econd(no)->op</code></pre><h3 id="5-高效绘制-序列图"><a href="#5-高效绘制-序列图" class="headerlink" title="5. 高效绘制 序列图"></a>5. 高效绘制 <a href="https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#8-序列图" target="_blank" rel="noopener">序列图</a></h3><pre class=" language-seq"><code class="language-seq">Alice->Bob: Hello Bob, how are you?Note right of Bob: Bob thinksBob-->Alice: I am good thanks!</code></pre><h3 id="6-高效绘制-甘特图"><a href="#6-高效绘制-甘特图" class="headerlink" title="6. 高效绘制 甘特图"></a>6. 高效绘制 <a href="https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#9-甘特图" target="_blank" rel="noopener">甘特图</a></h3><pre class=" language-gantt"><code class="language-gantt">    title 项目开发流程    section 项目确定        需求分析       :a1, 2016-06-22, 3d        可行性报告     :after a1, 5d        概念验证       : 5d    section 项目实施        概要设计      :2016-07-05  , 5d        详细设计      :2016-07-08, 10d        编码          :2016-07-15, 10d        测试          :2016-07-22, 5d    section 发布验收        发布: 2d        验收: 3d</code></pre><h3 id="7-绘制表格"><a href="#7-绘制表格" class="headerlink" title="7. 绘制表格"></a>7. 绘制表格</h3><table><thead><tr><th>项目</th><th align="right">价格</th><th align="center">数量</th></tr></thead><tbody><tr><td>计算机</td><td align="right">$1600</td><td align="center">5</td></tr><tr><td>手机</td><td align="right">$12</td><td align="center">12</td></tr><tr><td>管线</td><td align="right">$1</td><td align="center">234</td></tr></tbody></table><h3 id="8-更详细语法说明"><a href="#8-更详细语法说明" class="headerlink" title="8. 更详细语法说明"></a>8. 更详细语法说明</h3><p>想要查看更详细的语法说明，可以参考我们准备的 <a href="https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown" target="_blank" rel="noopener">Cmd Markdown 简明语法手册</a>，进阶用户可以参考 <a href="https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#cmd-markdown-高阶语法手册" target="_blank" rel="noopener">Cmd Markdown 高阶语法手册</a> 了解更多高级功能。</p><p>总而言之，不同于其它 <em>所见即所得</em> 的编辑器：你只需使用键盘专注于书写文本内容，就可以生成印刷级的排版格式，省却在键盘和工具栏之间来回切换，调整内容和格式的麻烦。<strong>Markdown 在流畅的书写和印刷级的阅读体验之间找到了平衡。</strong> 目前它已经成为世界上最大的技术分享网站 GitHub 和 技术问答网站 StackOverFlow 的御用书写格式。</p><hr><h2 id="什么是-Cmd-Markdown"><a href="#什么是-Cmd-Markdown" class="headerlink" title="什么是 Cmd Markdown"></a>什么是 Cmd Markdown</h2><p>您可以使用很多工具书写 Markdown，但是 Cmd Markdown 是这个星球上我们已知的、最好的 Markdown 工具——没有之一 ：）因为深信文字的力量，所以我们和你一样，对流畅书写，分享思想和知识，以及阅读体验有极致的追求，我们把对于这些诉求的回应整合在 Cmd Markdown，并且一次，两次，三次，乃至无数次地提升这个工具的体验，最终将它演化成一个 <strong>编辑/发布/阅读</strong> Markdown 的在线平台——您可以在任何地方，任何系统/设备上管理这里的文字。</p><h3 id="1-实时同步预览"><a href="#1-实时同步预览" class="headerlink" title="1. 实时同步预览"></a>1. 实时同步预览</h3><p>我们将 Cmd Markdown 的主界面一分为二，左边为<strong>编辑区</strong>，右边为<strong>预览区</strong>，在编辑区的操作会实时地渲染到预览区方便查看最终的版面效果，并且如果你在其中一个区拖动滚动条，我们有一个巧妙的算法把另一个区的滚动条同步到等价的位置，超酷！</p><h3 id="2-编辑工具栏"><a href="#2-编辑工具栏" class="headerlink" title="2. 编辑工具栏"></a>2. 编辑工具栏</h3><p>也许您还是一个 Markdown 语法的新手，在您完全熟悉它之前，我们在 <strong>编辑区</strong> 的顶部放置了一个如下图所示的工具栏，您可以使用鼠标在工具栏上调整格式，不过我们仍旧鼓励你使用键盘标记格式，提高书写的流畅度。</p><p><img src="https://www.zybuluo.com/static/img/toolbar-editor.png" alt="tool-editor"></p><h3 id="3-编辑模式"><a href="#3-编辑模式" class="headerlink" title="3. 编辑模式"></a>3. 编辑模式</h3><p>完全心无旁骛的方式编辑文字：点击 <strong>编辑工具栏</strong> 最右侧的拉伸按钮或者按下 <code>Ctrl + M</code>，将 Cmd Markdown 切换到独立的编辑模式，这是一个极度简洁的写作环境，所有可能会引起分心的元素都已经被挪除，超清爽！</p><h3 id="4-实时的云端文稿"><a href="#4-实时的云端文稿" class="headerlink" title="4. 实时的云端文稿"></a>4. 实时的云端文稿</h3><p>为了保障数据安全，Cmd Markdown 会将您每一次击键的内容保存至云端，同时在 <strong>编辑工具栏</strong> 的最右侧提示 <code>已保存</code> 的字样。无需担心浏览器崩溃，机器掉电或者地震，海啸——在编辑的过程中随时关闭浏览器或者机器，下一次回到 Cmd Markdown 的时候继续写作。</p><h3 id="5-离线模式"><a href="#5-离线模式" class="headerlink" title="5. 离线模式"></a>5. 离线模式</h3><p>在网络环境不稳定的情况下记录文字一样很安全！在您写作的时候，如果电脑突然失去网络连接，Cmd Markdown 会智能切换至离线模式，将您后续键入的文字保存在本地，直到网络恢复再将他们传送至云端，即使在网络恢复前关闭浏览器或者电脑，一样没有问题，等到下次开启 Cmd Markdown 的时候，她会提醒您将离线保存的文字传送至云端。简而言之，我们尽最大的努力保障您文字的安全。</p><h3 id="6-管理工具栏"><a href="#6-管理工具栏" class="headerlink" title="6. 管理工具栏"></a>6. 管理工具栏</h3><p>为了便于管理您的文稿，在 <strong>预览区</strong> 的顶部放置了如下所示的 <strong>管理工具栏</strong>：</p><p><img src="https://www.zybuluo.com/static/img/toolbar-manager.jpg" alt="tool-manager"></p><p>通过管理工具栏可以：</p><p><i class="icon-share"></i> 发布：将当前的文稿生成固定链接，在网络上发布，分享<br><i class="icon-file"></i> 新建：开始撰写一篇新的文稿<br><i class="icon-trash"></i> 删除：删除当前的文稿<br><i class="icon-cloud"></i> 导出：将当前的文稿转化为 Markdown 文本或者 Html 格式，并导出到本地<br><i class="icon-reorder"></i> 列表：所有新增和过往的文稿都可以在这里查看、操作<br><i class="icon-pencil"></i> 模式：切换 普通/Vim/Emacs 编辑模式</p><h3 id="7-阅读工具栏"><a href="#7-阅读工具栏" class="headerlink" title="7. 阅读工具栏"></a>7. 阅读工具栏</h3><p><img src="https://www.zybuluo.com/static/img/toolbar-reader.jpg" alt="tool-manager"></p><p>通过 <strong>预览区</strong> 右上角的 <strong>阅读工具栏</strong>，可以查看当前文稿的目录并增强阅读体验。</p><p>工具栏上的五个图标依次为：</p><p><i class="icon-list"></i> 目录：快速导航当前文稿的目录结构以跳转到感兴趣的段落<br><i class="icon-chevron-sign-left"></i> 视图：互换左边编辑区和右边预览区的位置<br><i class="icon-adjust"></i> 主题：内置了黑白两种模式的主题，试试 <strong>黑色主题</strong>，超炫！<br><i class="icon-desktop"></i> 阅读：心无旁骛的阅读模式提供超一流的阅读体验<br><i class="icon-fullscreen"></i> 全屏：简洁，简洁，再简洁，一个完全沉浸式的写作和阅读环境</p><h3 id="8-阅读模式"><a href="#8-阅读模式" class="headerlink" title="8. 阅读模式"></a>8. 阅读模式</h3><p>在 <strong>阅读工具栏</strong> 点击 <i class="icon-desktop"></i> 或者按下 <code>Ctrl+Alt+M</code> 随即进入独立的阅读模式界面，我们在版面渲染上的每一个细节：字体，字号，行间距，前背景色都倾注了大量的时间，努力提升阅读的体验和品质。</p><h3 id="9-标签、分类和搜索"><a href="#9-标签、分类和搜索" class="headerlink" title="9. 标签、分类和搜索"></a>9. 标签、分类和搜索</h3><p>在编辑区任意行首位置输入以下格式的文字可以标签当前文档：</p><p>标签： 未分类</p><p>标签以后的文稿在【文件列表】（Ctrl+Alt+F）里会按照标签分类，用户可以同时使用键盘或者鼠标浏览查看，或者在【文件列表】的搜索文本框内搜索标题关键字过滤文稿，如下图所示：</p><p><img src="https://www.zybuluo.com/static/img/file-list.png" alt="file-list"></p><h3 id="10-文稿发布和分享"><a href="#10-文稿发布和分享" class="headerlink" title="10. 文稿发布和分享"></a>10. 文稿发布和分享</h3><p>在您使用 Cmd Markdown 记录，创作，整理，阅读文稿的同时，我们不仅希望它是一个有力的工具，更希望您的思想和知识通过这个平台，连同优质的阅读体验，将他们分享给有相同志趣的人，进而鼓励更多的人来到这里记录分享他们的思想和知识，尝试点击 <i class="icon-share"></i> (Ctrl+Alt+P) 发布这份文档给好友吧！</p><hr><p>再一次感谢您花费时间阅读这份欢迎稿，点击 <i class="icon-file"></i> (Ctrl+Alt+N) 开始撰写新的文稿吧！祝您在这里记录、阅读、分享愉快！</p><p>作者 <a href="http://weibo.com/ghosert" target="_blank" rel="noopener">@ghosert</a><br>2016 年 07月 07日    </p><p>[^LaTeX]: 支持 <strong>LaTeX</strong> 编辑显示支持，例如：$\sum_{i=1}^n a_i=0$， 访问 <a href="http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference" target="_blank" rel="noopener">MathJax</a> 参考更多使用方法。</p><p>[^code]: 代码高亮功能支持包括 Java, Python, JavaScript 在内的，<strong>四十一</strong>种主流编程语言。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>sparseArrPlus</title>
      <link href="/2019/09/14/sparsearrplus/"/>
      <url>/2019/09/14/sparsearrplus/</url>
      
        <content type="html"><![CDATA[<h1 id="数组模拟环形队列"><a href="#数组模拟环形队列" class="headerlink" title="数组模拟环形队列"></a>数组模拟环形队列</h1><hr><p>充分利用数组.将数组看做是一个环形的。(通过取模的方式来实现即可)</p><h3 id="分析说明："><a href="#分析说明：" class="headerlink" title="分析说明："></a>分析说明：</h3><blockquote><p>1)尾索引的下一个为头索引时表示队列满，即将队列容量空出一个作为约定,这个在做判断队列满的<br>时候需要注意  (rear + 1) % maxSize == front满]<br>2)  rear == front [空]<br>3)分析示意图如下</p></blockquote><hr><p><img src="https://raw.githubusercontent.com/ZhangNingChao1/learning/master/img/%E7%8E%AF%E5%BD%A2%E9%98%9F%E5%88%97.jpg" alt=""></p><hr><p>代码如下</p><blockquote><p>我们预留了一个位置，好让添加与取出数据更容易实现。这里rear与front的初始值都为0</p><pre class=" language-python"><code class="language-python"><span class="token operator">//</span>我们预留了一个位置，好让添加与取出数据更容易实现。这里rear与front的初始值都为<span class="token number">0</span> public boolean isEmpty<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> rear <span class="token operator">==</span> front<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public boolean isFull<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>rear <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> maxSize <span class="token operator">==</span> front<span class="token punctuation">;</span><span class="token operator">//</span>取余是为了除去（rear<span class="token operator">+</span><span class="token number">1</span>）<span class="token operator">></span>maxSize的情况    <span class="token punctuation">}</span></code></pre></blockquote><pre><code>public void addQueue(int add) {    if (isFull()) {        System.out.println("队列已满，不能加入数据");        return ;    }    arr[rear] = add;    rear = (rear + 1) % maxSize;}public int getQueue() {    if (isEmpty()) {        throw new RuntimeException("队列为空，没有数据");    }    int i = arr[front];    front = (front + 1) % maxSize;    return i;}public int headQueue() {    if (isEmpty()) {        throw new RuntimeException("队列为空，没有数据");    }    return arr[front];}public void showQueue() {    if (isEmpty()) {        System.out.println("队列空的，没有数据~~");        return;    }    for (int i = front; i &lt; front + size(); i++) {        System.out.println(arr[i % maxSize]);    }}public int size() {    return (rear + maxSize - front) % maxSize;//可能rear在front前面，所以这时我们加上maxSize}</code></pre><p>```</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>sparseArr</title>
      <link href="/2019/09/14/sparsearr/"/>
      <url>/2019/09/14/sparsearr/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="intro"><a href="#intro" class="headerlink" title="intro"></a>intro</h3><pre class=" language-bash"><code class="language-bash">sparseArr可以节省数组空间<span class="token punctuation">(</span>当然不适合所有情况<span class="token punctuation">)</span>，就像我们在开发五子棋之类的游戏时，用户可能刚开始玩，这时要先存档，那么我们如果创建一个和棋盘一样大小的数组来存储记录，显然这样做时很浪费内存的，这时我们就需要用到sparseArr<span class="token punctuation">(</span>稀疏数组<span class="token punctuation">)</span>了。</code></pre><h3 id="firstly"><a href="#firstly" class="headerlink" title="firstly"></a>firstly</h3><pre class=" language-bash"><code class="language-bash">我们先要确定棋盘的大小，好创建数组用来模拟，存进去几个数字做测试用。这里创建Arr吧。</code></pre><h3 id="second"><a href="#second" class="headerlink" title="second"></a>second</h3><pre class=" language-bash"><code class="language-bash">遍历第一步创建好的数组，主要是为了拿到Arr中的有效数字<span class="token punctuation">(</span>这里非0表示<span class="token punctuation">)</span>，有效数的个数记作sum.</code></pre><h3 id="thirdly"><a href="#thirdly" class="headerlink" title="thirdly"></a>thirdly</h3><pre class=" language-bash"><code class="language-bash">创建sparseArr：行<span class="token punctuation">(</span>sum+1<span class="token punctuation">)</span>,列<span class="token punctuation">(</span>3<span class="token punctuation">)</span>，<span class="token punctuation">(</span>以为sparseArr数组的第一条记录我们填写原来数组的大小，最后要做恢复记录用<span class="token punctuation">)</span></code></pre><h3 id="fourthly"><a href="#fourthly" class="headerlink" title="fourthly"></a>fourthly</h3><pre class=" language-bash"><code class="language-bash">遍历Arr，开始将有效数字的行列以及值作为sparseArr的第一行的三列存入，下面是代码int count<span class="token operator">=</span>0<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> 0<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> 11<span class="token punctuation">;</span> i++<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>int j <span class="token operator">=</span> 0<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> 11<span class="token punctuation">;</span> j++<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>chessArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> 0<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    count++<span class="token punctuation">;</span>                    sparseArr<span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">[</span>0<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>                    sparseArr<span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">[</span>1<span class="token punctuation">]</span><span class="token operator">=</span>j<span class="token punctuation">;</span>                    sparseArr<span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">[</span>2<span class="token punctuation">]</span><span class="token operator">=</span>chessArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        count的作用是要控制sparseArr数组的行变化</code></pre><h3 id="fifth"><a href="#fifth" class="headerlink" title="fifth"></a>fifth</h3><pre class=" language-bash"><code class="language-bash">这就算是数组的稀疏了，是不是节约了内存呢？那这要看我们Arr1中的记录数了。</code></pre><h3 id="sixth"><a href="#sixth" class="headerlink" title="sixth"></a>sixth</h3><pre class=" language-bash"><code class="language-bash">记录存档了，当然要恢复了。</code></pre><h3 id="seventh"><a href="#seventh" class="headerlink" title="seventh"></a>seventh</h3><pre class=" language-bash"><code class="language-bash">下面是sparseArr的恢复代码        //创建要恢复成的数组        int chessArr2<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span>new int <span class="token punctuation">[</span>sparseArr<span class="token punctuation">[</span>0<span class="token punctuation">]</span><span class="token punctuation">[</span>0<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>sparseArr<span class="token punctuation">[</span>0<span class="token punctuation">]</span><span class="token punctuation">[</span>1<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        //将稀疏数组转化为原数组        <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> 1<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> sparseArr.length<span class="token punctuation">;</span> i++<span class="token punctuation">)</span> <span class="token punctuation">{</span>            chessArr2<span class="token punctuation">[</span>sparseArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>0<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>sparseArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>1<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span>sparseArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>2<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        //遍历原数组        <span class="token keyword">for</span> <span class="token punctuation">(</span>int item<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">:</span> chessArr2<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>int row <span class="token keyword">:</span> item<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System.out.print<span class="token punctuation">(</span>row + <span class="token string">"      "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span></code></pre><h3 id="eighth"><a href="#eighth" class="headerlink" title="eighth"></a>eighth</h3><pre class=" language-bash"><code class="language-bash">当然，有兴趣的同学不妨写一下将记录写入磁盘和读出磁盘☺</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue.js</title>
      <link href="/2019/09/09/vue.js/"/>
      <url>/2019/09/09/vue.js/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h2 id="intro"><a href="#intro" class="headerlink" title="intro"></a>intro</h2><pre class=" language-bash"><code class="language-bash">vue.js是一个MVVM的框架M:Mode<span class="token punctuation">(</span>模型<span class="token punctuation">)</span>V<span class="token punctuation">(</span>视图<span class="token punctuation">)</span>VM<span class="token punctuation">(</span>模型和视图，起到由模型数据向视图展示或接受来自视图中的数据，然后经计算返回到视图的作用<span class="token punctuation">)</span></code></pre><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">1、创建一个html文件，这里我用的是JetBrains WebStorm，用它管理一些js，html之类的感觉很方便。2、然后引入vue.min.js文件，下面是代码<span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">"en"</span><span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>title<span class="token operator">></span>VueDemo<span class="token operator">&lt;</span>/title<span class="token operator">></span>    <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"vue.min.js"</span><span class="token operator">></span><span class="token operator">&lt;</span>/script<span class="token operator">></span><span class="token operator">&lt;</span>/head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span>        <span class="token operator">&lt;</span>div class<span class="token operator">=</span><span class="token string">"student"</span> <span class="token operator">></span>            <span class="token punctuation">{</span><span class="token punctuation">{</span>person<span class="token punctuation">}</span><span class="token punctuation">}</span>        <span class="token operator">&lt;</span>/div<span class="token operator">></span><span class="token operator">&lt;</span>/body<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>    var vm<span class="token operator">=</span>new Vue<span class="token punctuation">(</span><span class="token punctuation">{</span>        el:<span class="token string">'.student'</span>,        data: <span class="token punctuation">{</span>            person:<span class="token string">'张三'</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span>/script<span class="token operator">></span><span class="token operator">&lt;</span>/html<span class="token operator">></span>3、<span class="token operator">&lt;</span><span class="token operator">!</span>--如果student用id，则下面Vue里就用<span class="token string">'#student'</span>--<span class="token operator">></span></code></pre><h3 id="Run"><a href="#Run" class="headerlink" title="Run"></a>Run</h3><pre class=" language-bash"><code class="language-bash">运行之后打开就会显示 张三</code></pre><h3 id="other"><a href="#other" class="headerlink" title="other"></a>other</h3><pre class=" language-bash"><code class="language-bash">另外它还有 v-model、v-bind、v-if、v-else、v-for等</code></pre><h3 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h3><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">"en"</span><span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>title<span class="token operator">></span>VueDemo<span class="token operator">&lt;</span>/title<span class="token operator">></span>    <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"vue.min.js"</span><span class="token operator">></span><span class="token operator">&lt;</span>/script<span class="token operator">></span><span class="token operator">&lt;</span>/head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span>        <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"student"</span><span class="token operator">></span>            <span class="token punctuation">{</span><span class="token punctuation">{</span>person<span class="token punctuation">}</span><span class="token punctuation">}</span>            <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> v-model<span class="token operator">=</span><span class="token string">"num1"</span> <span class="token operator">></span>+<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> v-model<span class="token operator">=</span><span class="token string">"num2"</span> <span class="token operator">>=</span>            <span class="token punctuation">{</span><span class="token punctuation">{</span>Number.parseInt<span class="token punctuation">(</span>num1<span class="token punctuation">)</span>+Number.parseInt<span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span>            <span class="token operator">&lt;</span>button <span class="token operator">></span>计算<span class="token operator">&lt;</span>/button<span class="token operator">></span>        <span class="token operator">&lt;</span>/div<span class="token operator">></span><span class="token operator">&lt;</span>/body<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>    var vm<span class="token operator">=</span>new Vue<span class="token punctuation">(</span><span class="token punctuation">{</span>        el:<span class="token string">'#student'</span>,        data: <span class="token punctuation">{</span>            person:<span class="token string">'计算器'</span>,            num1:<span class="token string">'3'</span>,            num2:<span class="token string">'2'</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span>/script<span class="token operator">></span><span class="token operator">&lt;</span>/html<span class="token operator">></span></code></pre><p>### </p><pre class=" language-bash"><code class="language-bash">------------------------</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot</title>
      <link href="/2019/09/09/springboot/"/>
      <url>/2019/09/09/springboot/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-project"><a href="#Create-a-new-project" class="headerlink" title="Create a new project"></a>Create a new project</h3><pre class=" language-bash"><code class="language-bash">new Maven project</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/09/09/hello-world/"/>
      <url>/2019/09/09/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
