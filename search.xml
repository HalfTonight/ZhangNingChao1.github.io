<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>sparseArr</title>
      <link href="/2019/09/14/sparsearr-fu-ben/"/>
      <url>/2019/09/14/sparsearr-fu-ben/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="intro"><a href="#intro" class="headerlink" title="intro"></a>intro</h3><pre class=" language-bash"><code class="language-bash">sparseArr可以节省数组空间<span class="token punctuation">(</span>当然不适合所有情况<span class="token punctuation">)</span>，就像我们在开发五子棋之类的游戏时，用户可能刚开始玩，这时要先存档，那么我们如果创建一个和棋盘一样大小的数组来存储记录，显然这样做时很浪费内存的，这时我们就需要用到sparseArr<span class="token punctuation">(</span>稀疏数组<span class="token punctuation">)</span>了。</code></pre><h3 id="firstly"><a href="#firstly" class="headerlink" title="firstly"></a>firstly</h3><pre class=" language-bash"><code class="language-bash">我们先要确定棋盘的大小，好创建数组用来模拟，存进去几个数字做测试用。这里创建Arr吧。</code></pre><h3 id="second"><a href="#second" class="headerlink" title="second"></a>second</h3><pre class=" language-bash"><code class="language-bash">遍历第一步创建好的数组，主要是为了拿到Arr中的有效数字<span class="token punctuation">(</span>这里非0表示<span class="token punctuation">)</span>，有效数的个数记作sum.</code></pre><h3 id="thirdly"><a href="#thirdly" class="headerlink" title="thirdly"></a>thirdly</h3><pre class=" language-bash"><code class="language-bash">创建sparseArr：行<span class="token punctuation">(</span>sum+1<span class="token punctuation">)</span>,列<span class="token punctuation">(</span>3<span class="token punctuation">)</span>，<span class="token punctuation">(</span>以为sparseArr数组的第一条记录我们填写原来数组的大小，最后要做恢复记录用<span class="token punctuation">)</span></code></pre><h3 id="fourthly"><a href="#fourthly" class="headerlink" title="fourthly"></a>fourthly</h3><pre class=" language-bash"><code class="language-bash">遍历Arr，开始将有效数字的行列以及值作为sparseArr的第一行的三列存入，下面是代码int count<span class="token operator">=</span>0<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> 0<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> 11<span class="token punctuation">;</span> i++<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>int j <span class="token operator">=</span> 0<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> 11<span class="token punctuation">;</span> j++<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>chessArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> 0<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    count++<span class="token punctuation">;</span>                    sparseArr<span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">[</span>0<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>                    sparseArr<span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">[</span>1<span class="token punctuation">]</span><span class="token operator">=</span>j<span class="token punctuation">;</span>                    sparseArr<span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">[</span>2<span class="token punctuation">]</span><span class="token operator">=</span>chessArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        count的作用是要控制sparseArr数组的行变化</code></pre><h3 id="fifth"><a href="#fifth" class="headerlink" title="fifth"></a>fifth</h3><pre class=" language-bash"><code class="language-bash">这就算是数组的稀疏了，是不是节约了内存呢？那这要看我们Arr1中的记录数了。</code></pre><h3 id="sixth"><a href="#sixth" class="headerlink" title="sixth"></a>sixth</h3><pre class=" language-bash"><code class="language-bash">记录存档了，当然要恢复了。</code></pre><h3 id="seventh"><a href="#seventh" class="headerlink" title="seventh"></a>seventh</h3><pre class=" language-bash"><code class="language-bash">下面是sparseArr的恢复代码        //创建要恢复成的数组        int chessArr2<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span>new int <span class="token punctuation">[</span>sparseArr<span class="token punctuation">[</span>0<span class="token punctuation">]</span><span class="token punctuation">[</span>0<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>sparseArr<span class="token punctuation">[</span>0<span class="token punctuation">]</span><span class="token punctuation">[</span>1<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        //将稀疏数组转化为原数组        <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> 1<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> sparseArr.length<span class="token punctuation">;</span> i++<span class="token punctuation">)</span> <span class="token punctuation">{</span>            chessArr2<span class="token punctuation">[</span>sparseArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>0<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>sparseArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>1<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span>sparseArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>2<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        //遍历原数组        <span class="token keyword">for</span> <span class="token punctuation">(</span>int item<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">:</span> chessArr2<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>int row <span class="token keyword">:</span> item<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System.out.print<span class="token punctuation">(</span>row + <span class="token string">"      "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span></code></pre><h3 id="eighth"><a href="#eighth" class="headerlink" title="eighth"></a>eighth</h3><pre class=" language-bash"><code class="language-bash">当然，有兴趣的同学不妨写一下将记录写入磁盘和读出磁盘☺</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>sparseArr</title>
      <link href="/2019/09/14/sparsearr/"/>
      <url>/2019/09/14/sparsearr/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="intro"><a href="#intro" class="headerlink" title="intro"></a>intro</h3><pre class=" language-bash"><code class="language-bash">sparseArr可以节省数组空间<span class="token punctuation">(</span>当然不适合所有情况<span class="token punctuation">)</span>，就像我们在开发五子棋之类的游戏时，用户可能刚开始玩，这时要先存档，那么我们如果创建一个和棋盘一样大小的数组来存储记录，显然这样做时很浪费内存的，这时我们就需要用到sparseArr<span class="token punctuation">(</span>稀疏数组<span class="token punctuation">)</span>了。</code></pre><h3 id="firstly"><a href="#firstly" class="headerlink" title="firstly"></a>firstly</h3><pre class=" language-bash"><code class="language-bash">我们先要确定棋盘的大小，好创建数组用来模拟，存进去几个数字做测试用。这里创建Arr吧。</code></pre><h3 id="second"><a href="#second" class="headerlink" title="second"></a>second</h3><pre class=" language-bash"><code class="language-bash">遍历第一步创建好的数组，主要是为了拿到Arr中的有效数字<span class="token punctuation">(</span>这里非0表示<span class="token punctuation">)</span>，有效数的个数记作sum.</code></pre><h3 id="thirdly"><a href="#thirdly" class="headerlink" title="thirdly"></a>thirdly</h3><pre class=" language-bash"><code class="language-bash">创建sparseArr：行<span class="token punctuation">(</span>sum+1<span class="token punctuation">)</span>,列<span class="token punctuation">(</span>3<span class="token punctuation">)</span>，<span class="token punctuation">(</span>以为sparseArr数组的第一条记录我们填写原来数组的大小，最后要做恢复记录用<span class="token punctuation">)</span></code></pre><h3 id="fourthly"><a href="#fourthly" class="headerlink" title="fourthly"></a>fourthly</h3><pre class=" language-bash"><code class="language-bash">遍历Arr，开始将有效数字的行列以及值作为sparseArr的第一行的三列存入，下面是代码int count<span class="token operator">=</span>0<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> 0<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> 11<span class="token punctuation">;</span> i++<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>int j <span class="token operator">=</span> 0<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> 11<span class="token punctuation">;</span> j++<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>chessArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> 0<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    count++<span class="token punctuation">;</span>                    sparseArr<span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">[</span>0<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>                    sparseArr<span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">[</span>1<span class="token punctuation">]</span><span class="token operator">=</span>j<span class="token punctuation">;</span>                    sparseArr<span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">[</span>2<span class="token punctuation">]</span><span class="token operator">=</span>chessArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        count的作用是要控制sparseArr数组的行变化</code></pre><h3 id="fifth"><a href="#fifth" class="headerlink" title="fifth"></a>fifth</h3><pre class=" language-bash"><code class="language-bash">这就算是数组的稀疏了，是不是节约了内存呢？那这要看我们Arr1中的记录数了。</code></pre><h3 id="sixth"><a href="#sixth" class="headerlink" title="sixth"></a>sixth</h3><pre class=" language-bash"><code class="language-bash">记录存档了，当然要恢复了。</code></pre><h3 id="seventh"><a href="#seventh" class="headerlink" title="seventh"></a>seventh</h3><pre class=" language-bash"><code class="language-bash">下面是sparseArr的恢复代码        //创建要恢复成的数组        int chessArr2<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span>new int <span class="token punctuation">[</span>sparseArr<span class="token punctuation">[</span>0<span class="token punctuation">]</span><span class="token punctuation">[</span>0<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>sparseArr<span class="token punctuation">[</span>0<span class="token punctuation">]</span><span class="token punctuation">[</span>1<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        //将稀疏数组转化为原数组        <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> 1<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> sparseArr.length<span class="token punctuation">;</span> i++<span class="token punctuation">)</span> <span class="token punctuation">{</span>            chessArr2<span class="token punctuation">[</span>sparseArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>0<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>sparseArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>1<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span>sparseArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>2<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        //遍历原数组        <span class="token keyword">for</span> <span class="token punctuation">(</span>int item<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">:</span> chessArr2<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>int row <span class="token keyword">:</span> item<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System.out.print<span class="token punctuation">(</span>row + <span class="token string">"      "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span></code></pre><h3 id="eighth"><a href="#eighth" class="headerlink" title="eighth"></a>eighth</h3><pre class=" language-bash"><code class="language-bash">当然，有兴趣的同学不妨写一下将记录写入磁盘和读出磁盘☺</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue.js</title>
      <link href="/2019/09/09/vue.js/"/>
      <url>/2019/09/09/vue.js/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h2 id="intro"><a href="#intro" class="headerlink" title="intro"></a>intro</h2><pre class=" language-bash"><code class="language-bash">vue.js是一个MVVM的框架M:Mode<span class="token punctuation">(</span>模型<span class="token punctuation">)</span>V<span class="token punctuation">(</span>视图<span class="token punctuation">)</span>VM<span class="token punctuation">(</span>模型和视图，起到由模型数据向视图展示或接受来自视图中的数据，然后经计算返回到视图的作用<span class="token punctuation">)</span></code></pre><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">1、创建一个html文件，这里我用的是JetBrains WebStorm，用它管理一些js，html之类的感觉很方便。2、然后引入vue.min.js文件，下面是代码<span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">"en"</span><span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>title<span class="token operator">></span>VueDemo<span class="token operator">&lt;</span>/title<span class="token operator">></span>    <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"vue.min.js"</span><span class="token operator">></span><span class="token operator">&lt;</span>/script<span class="token operator">></span><span class="token operator">&lt;</span>/head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span>        <span class="token operator">&lt;</span>div class<span class="token operator">=</span><span class="token string">"student"</span> <span class="token operator">></span>            <span class="token punctuation">{</span><span class="token punctuation">{</span>person<span class="token punctuation">}</span><span class="token punctuation">}</span>        <span class="token operator">&lt;</span>/div<span class="token operator">></span><span class="token operator">&lt;</span>/body<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>    var vm<span class="token operator">=</span>new Vue<span class="token punctuation">(</span><span class="token punctuation">{</span>        el:<span class="token string">'.student'</span>,        data: <span class="token punctuation">{</span>            person:<span class="token string">'张三'</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span>/script<span class="token operator">></span><span class="token operator">&lt;</span>/html<span class="token operator">></span>3、<span class="token operator">&lt;</span><span class="token operator">!</span>--如果student用id，则下面Vue里就用<span class="token string">'#student'</span>--<span class="token operator">></span></code></pre><h3 id="Run"><a href="#Run" class="headerlink" title="Run"></a>Run</h3><pre class=" language-bash"><code class="language-bash">运行之后打开就会显示 张三</code></pre><h3 id="other"><a href="#other" class="headerlink" title="other"></a>other</h3><pre class=" language-bash"><code class="language-bash">另外它还有 v-model、v-bind、v-if、v-else、v-for等</code></pre><h3 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h3><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">"en"</span><span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>title<span class="token operator">></span>VueDemo<span class="token operator">&lt;</span>/title<span class="token operator">></span>    <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"vue.min.js"</span><span class="token operator">></span><span class="token operator">&lt;</span>/script<span class="token operator">></span><span class="token operator">&lt;</span>/head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span>        <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"student"</span><span class="token operator">></span>            <span class="token punctuation">{</span><span class="token punctuation">{</span>person<span class="token punctuation">}</span><span class="token punctuation">}</span>            <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> v-model<span class="token operator">=</span><span class="token string">"num1"</span> <span class="token operator">></span>+<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> v-model<span class="token operator">=</span><span class="token string">"num2"</span> <span class="token operator">>=</span>            <span class="token punctuation">{</span><span class="token punctuation">{</span>Number.parseInt<span class="token punctuation">(</span>num1<span class="token punctuation">)</span>+Number.parseInt<span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span>            <span class="token operator">&lt;</span>button <span class="token operator">></span>计算<span class="token operator">&lt;</span>/button<span class="token operator">></span>        <span class="token operator">&lt;</span>/div<span class="token operator">></span><span class="token operator">&lt;</span>/body<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>    var vm<span class="token operator">=</span>new Vue<span class="token punctuation">(</span><span class="token punctuation">{</span>        el:<span class="token string">'#student'</span>,        data: <span class="token punctuation">{</span>            person:<span class="token string">'计算器'</span>,            num1:<span class="token string">'3'</span>,            num2:<span class="token string">'2'</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span>/script<span class="token operator">></span><span class="token operator">&lt;</span>/html<span class="token operator">></span></code></pre><p>### </p><pre class=" language-bash"><code class="language-bash">------------------------</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot</title>
      <link href="/2019/09/09/springboot/"/>
      <url>/2019/09/09/springboot/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-project"><a href="#Create-a-new-project" class="headerlink" title="Create a new project"></a>Create a new project</h3><pre class=" language-bash"><code class="language-bash">new Maven project</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/09/09/hello-world/"/>
      <url>/2019/09/09/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
